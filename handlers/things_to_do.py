from aiogram import Router, types, F
from aiogram.filters import StateFilter
from keybords.for_navigate import homework_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.formatting import as_marked_section, Underline, Bold, as_key_value

TASKS = []

work_router = Router()


@work_router.message((F.text == '–≤–∏–±–µ—Äi—Ç—å –æ–ø—Üi—é'))
async def works_cmd(message: types.Message):
    await message.answer('–í–∏–±–µ—Äi—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:',
                         reply_markup=homework_keyboard)


@work_router.message((F.text == '—Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å'))
async def add_work(message: types.Message):
    if not TASKS:
        await message.answer("–Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å")
        return
    for i in range(len(TASKS)):
        text = as_marked_section(
            Underline(Bold(f'–ó–∞–≤–¥–∞–Ω–Ω—è {i+1}')),
            as_key_value('–ó–∞–¥–∞—á–∞', TASKS[i]['topic']),
            as_key_value('–í–∞–∂–ª–∏–≤i—Å—Ç—å', TASKS[i]['number']),
            as_key_value('–¢–µ–º–∞', TASKS[i]['content']),
            marker='üìå '
        )
        await message.answer(text.as_html())


class AddHomework(StatesGroup):
    topic = State()
    number = State()
    content = State()


@work_router.message(StateFilter(None), (F.text == '–¥–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É'))
async def add_work(message: types.Message, state: FSMContext):
    await message.answer('–≤–≤–µ–¥i—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:',
                         reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddHomework.topic)


@work_router.message(AddHomework.topic, F.text)
async def add_topic(message: types.Message, state: FSMContext):
    content = message.text.lower()
    await state.update_data(topic=content)
    await message.answer('–≤–≤–µ–¥i—Ç—å –≤–∞–∂–ª–∏–≤i—Å—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –≤i–¥ 1 –¥–æ 5 –¥–µ 5 –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –∞ 1 –º–æ–∂–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –≤ –æ—Å—Ç–∞–Ω–Ω—é —á–µ—Ä–≥—É: ')
    await state.set_state(AddHomework.number)


@work_router.message(AddHomework.number, F.text)
async def add_number(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer('–≤–≤–µ–¥i—Ç—å —Ç–µ–º—É: ')
    await state.set_state(AddHomework.content)


@work_router.message(AddHomework.content, F.text)
async def add_content(message: types.Message, state: FSMContext):
    content = message.text.lower()
    await state.update_data(content=content)
    await message.answer('–∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–øi—à–Ω–æ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ',
                         reply_markup=homework_keyboard)
    data = await state.get_data()
    await message.answer(str(data))
    TASKS.append(data)
    await state.clear()


@work_router.message((F.text == '–≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'))
async def delete_work(message: types.Message, state: FSMContext):
    if not TASKS:
        await message.answer("–Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    tasks_text = '–æ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:\n'
    for task in TASKS:
        tasks_text += f'{task["topic"]}\n'

    await message.answer(f'{tasks_text}\n–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:')
    await state.set_state('delete_task')

@work_router.message(lambda message, state: True)
async def delete_task(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'delete_task':
        task_name = message.text.lower()
        global TASKS
        for task in TASKS:
            if task['topic'].lower() == task_name:
                TASKS.remove(task)
                await message.answer(f'–ó–∞–≤–¥–∞–Ω–Ω—è "{task_name}" –≤–∏–¥–∞–ª–µ–Ω–æ.')
                await state.clear()
                return
        await message.answer(f'–ó–∞–≤–¥–∞–Ω–Ω—è "{task_name}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        await state.clear()

# class EditHomework(StatesGroup):
#     select = State()
#     choose = State()
#     edit = State()
#
#
# @homework_router.message((F.text.lower() == '–ø–æ—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'))
# async def edit_task(message: types.Message, state: FSMContext):
#     if not TASKS:
#         await message.answer("–Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
#         return
#
#     tasks = "–æ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:\n"
#     for i, task in enumerate(TASKS, 1):
#         tasks += f"{i}. {task['topic']}\n"
#
#     await message.answer(f"{tasks}\n–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:")
#     await state.set_state(EditHomework.select)
#
#
# @homework_router.message(EditHomework.select)
# async def select_task(message: types.Message, state: FSMContext):
#     try:
#         task_index = int(message.text.strip()) - 1
#         if 0 <= task_index < len(TASKS):
#             await state.update_data(task_index=task_index)
#             await message.answer(
#                 "—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?\n"
#                 "1. –Ω–∞–∑–≤–∞\n"
#                 "2. —Ç–µ–º–∞\n"
#                 "3. –∑–∞–¥–∞—á–∞\n"
#                 "–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä:"
#             )
#             await state.set_state(EditHomework.choose)
#         else:
#             await message.answer("–Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
#     except ValueError:
#         await message.answer("–±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è.")
#
#
# @homework_router.message(EditHomework.choose)
# async def choose_field(message: types.Message, state: FSMContext):
#     field = {
#         "1": "topic",
#         "2": "number",
#         "3": "content",
#     }
#     choice = message.text.strip()
#     if choice in field:
#         await state.update_data(field=field[choice])
#         field_name = {
#             "topic": "–Ω–∞–∑–≤—É",
#             "number": "–≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å",
#             "content": "—Ç–µ–º—É",
#         }[field[choice]]
#         await message.answer(f"–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É {field_name}:")
#         await state.set_state(EditHomework.edit)
#     else:
#         await message.answer("–Ω–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
#
#
# @homework_router.message(EditHomework.edit)
# async def edit_field(message: types.Message, state: FSMContext):
#     new_value = message.text.lower()
#     data = await state.get_data()
#     task_index = data.get("task_index")
#     field = data.get("field")
#
#     if task_index is not None and field:
#         TASKS[task_index][field] = new_value
#         await message.answer("–∑–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
#         await state.clear()
#     else:
#         await message.answer("—Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
#         await state.clear()